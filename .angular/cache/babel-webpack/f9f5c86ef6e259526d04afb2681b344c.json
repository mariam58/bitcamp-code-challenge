{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Directive, Input, Output, NgModule } from '@angular/core';\nimport * as echarts from 'echarts/core';\nimport { CanvasRenderer } from 'echarts/renderers';\nimport { interval } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nclass HtmlHelper {\n  static elementIsFocusable(ele) {\n    return ele.getAttribute(\"tabindex\") != null;\n  }\n\n  static getWidthSensor(element, periodicityInMiliSeconds = 2000) {\n    let oldWidth = element.clientWidth;\n    return interval(periodicityInMiliSeconds).pipe(filter(ignore => {\n      if (Math.abs(oldWidth - element.clientWidth) > 2) {\n        oldWidth = element.clientWidth;\n        return true;\n      }\n\n      return false;\n    }), map(ignore => element.clientWidth));\n  }\n\n  static getHeightSensor(element, periodicityInMiliSeconds = 2000) {\n    let oldHeight = element.clientHeight;\n    return interval(periodicityInMiliSeconds).pipe(filter(ignore => {\n      if (Math.abs(oldHeight - element.clientHeight) > 2) {\n        oldHeight = element.clientHeight;\n        return true;\n      }\n\n      return false;\n    }), map(ignore => element.clientWidth));\n  }\n\n}\n\nclass EchartsDirective {\n  constructor(_el) {\n    this._el = _el;\n    this.extentions = [];\n    this.isResizable = true;\n    this.defaultWidth = 400;\n    this.defaultHeight = 400;\n    this.periodicityInMiliSeconds = 2000;\n    this.theme = '';\n    this.echartsInstance = new EventEmitter();\n  }\n\n  ngOnInit() {\n    echarts.use([...this.extentions, CanvasRenderer]);\n    this._echartsInstance = echarts.init(this._el.nativeElement, this.theme, {\n      width: this._el.nativeElement.clientWidth === this.defaultWidth ? 400 : undefined,\n      height: this._el.nativeElement.clientHeight === 0 ? this.defaultHeight : undefined\n    });\n    this.echartsInstance.emit(this._echartsInstance);\n\n    this._setParams();\n\n    if (this.isResizable) {\n      this._addResizbleFunctionality();\n    }\n  }\n\n  ngOnChanges(changes) {\n    if (changes.options && !changes.options.firstChange) {\n      this._setParams();\n    }\n\n    if (changes.isResizable && !changes.isResizable.firstChange) {\n      if (this.isResizable) {\n        this._addResizbleFunctionality();\n      } else {\n        if (this._subscription != null) this._subscription.unsubscribe();\n      }\n    }\n  }\n\n  _addResizbleFunctionality() {\n    if (this._subscription != null) this._subscription.unsubscribe();\n    this._subscription = HtmlHelper.getWidthSensor(this._el.nativeElement).subscribe(() => {\n      if (this._echartsInstance != null) {\n        this._echartsInstance.resize();\n      }\n    });\n  }\n\n  _setParams() {\n    if (this._echartsInstance != null && this.options != null) {\n      this._echartsInstance.setOption(this.options, true);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._subscription != null) this._subscription.unsubscribe();\n  }\n\n}\n\nEchartsDirective.ɵfac = function EchartsDirective_Factory(t) {\n  return new (t || EchartsDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nEchartsDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: EchartsDirective,\n  selectors: [[\"\", \"echarts\", \"\"]],\n  inputs: {\n    options: \"options\",\n    extentions: \"extentions\",\n    isResizable: \"isResizable\",\n    defaultWidth: \"defaultWidth\",\n    defaultHeight: \"defaultHeight\",\n    periodicityInMiliSeconds: \"periodicityInMiliSeconds\",\n    theme: \"theme\"\n  },\n  outputs: {\n    echartsInstance: \"echartsInstance\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(EchartsDirective, [{\n    type: Directive,\n    args: [{\n      selector: \"[echarts]\"\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    options: [{\n      type: Input\n    }],\n    extentions: [{\n      type: Input\n    }],\n    isResizable: [{\n      type: Input\n    }],\n    defaultWidth: [{\n      type: Input\n    }],\n    defaultHeight: [{\n      type: Input\n    }],\n    periodicityInMiliSeconds: [{\n      type: Input\n    }],\n    theme: [{\n      type: Input\n    }],\n    echartsInstance: [{\n      type: Output\n    }]\n  });\n})();\n\nclass EchartsxModule {}\n\nEchartsxModule.ɵfac = function EchartsxModule_Factory(t) {\n  return new (t || EchartsxModule)();\n};\n\nEchartsxModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: EchartsxModule\n});\nEchartsxModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(EchartsxModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [EchartsDirective],\n      exports: [EchartsDirective]\n    }]\n  }], null, null);\n})();\n/*\r\n * Public API Surface of echartsx\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { EchartsDirective, EchartsxModule };","map":{"version":3,"sources":["C:/Users/User/Desktop/bitcamp-code-challenge/corona-virus-statistics/node_modules/echarts-for-angular/fesm2020/echarts-for-angular.mjs"],"names":["i0","EventEmitter","Directive","Input","Output","NgModule","echarts","CanvasRenderer","interval","filter","map","HtmlHelper","elementIsFocusable","ele","getAttribute","getWidthSensor","element","periodicityInMiliSeconds","oldWidth","clientWidth","pipe","ignore","Math","abs","getHeightSensor","oldHeight","clientHeight","EchartsDirective","constructor","_el","extentions","isResizable","defaultWidth","defaultHeight","theme","echartsInstance","ngOnInit","use","_echartsInstance","init","nativeElement","width","undefined","height","emit","_setParams","_addResizbleFunctionality","ngOnChanges","changes","options","firstChange","_subscription","unsubscribe","subscribe","resize","setOption","ngOnDestroy","ɵfac","ElementRef","ɵdir","type","args","selector","EchartsxModule","ɵmod","ɵinj","declarations","exports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { EventEmitter, Directive, Input, Output, NgModule } from '@angular/core';\nimport * as echarts from 'echarts/core';\nimport { CanvasRenderer } from 'echarts/renderers';\nimport { interval } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nclass HtmlHelper {\r\n    static elementIsFocusable(ele) {\r\n        return ele.getAttribute(\"tabindex\") != null;\r\n    }\r\n    static getWidthSensor(element, periodicityInMiliSeconds = 2000) {\r\n        let oldWidth = element.clientWidth;\r\n        return interval(periodicityInMiliSeconds).pipe(filter(ignore => {\r\n            if (Math.abs(oldWidth - element.clientWidth) > 2) {\r\n                oldWidth = element.clientWidth;\r\n                return true;\r\n            }\r\n            return false;\r\n        }), map(ignore => element.clientWidth));\r\n    }\r\n    static getHeightSensor(element, periodicityInMiliSeconds = 2000) {\r\n        let oldHeight = element.clientHeight;\r\n        return interval(periodicityInMiliSeconds).pipe(filter(ignore => {\r\n            if (Math.abs(oldHeight - element.clientHeight) > 2) {\r\n                oldHeight = element.clientHeight;\r\n                return true;\r\n            }\r\n            return false;\r\n        }), map(ignore => element.clientWidth));\r\n    }\r\n}\n\nclass EchartsDirective {\r\n    constructor(_el) {\r\n        this._el = _el;\r\n        this.extentions = [];\r\n        this.isResizable = true;\r\n        this.defaultWidth = 400;\r\n        this.defaultHeight = 400;\r\n        this.periodicityInMiliSeconds = 2000;\r\n        this.theme = '';\r\n        this.echartsInstance = new EventEmitter();\r\n    }\r\n    ngOnInit() {\r\n        echarts.use([...this.extentions, CanvasRenderer]);\r\n        this._echartsInstance = echarts.init(this._el.nativeElement, this.theme, {\r\n            width: this._el.nativeElement.clientWidth === this.defaultWidth ? 400 : undefined,\r\n            height: this._el.nativeElement.clientHeight === 0 ? this.defaultHeight : undefined\r\n        });\r\n        this.echartsInstance.emit(this._echartsInstance);\r\n        this._setParams();\r\n        if (this.isResizable) {\r\n            this._addResizbleFunctionality();\r\n        }\r\n    }\r\n    ngOnChanges(changes) {\r\n        if (changes.options && !changes.options.firstChange) {\r\n            this._setParams();\r\n        }\r\n        if (changes.isResizable && !changes.isResizable.firstChange) {\r\n            if (this.isResizable) {\r\n                this._addResizbleFunctionality();\r\n            }\r\n            else {\r\n                if (this._subscription != null)\r\n                    this._subscription.unsubscribe();\r\n            }\r\n        }\r\n    }\r\n    _addResizbleFunctionality() {\r\n        if (this._subscription != null)\r\n            this._subscription.unsubscribe();\r\n        this._subscription = HtmlHelper.getWidthSensor(this._el.nativeElement).subscribe(() => {\r\n            if (this._echartsInstance != null) {\r\n                this._echartsInstance.resize();\r\n            }\r\n        });\r\n    }\r\n    _setParams() {\r\n        if (this._echartsInstance != null && this.options != null) {\r\n            this._echartsInstance.setOption(this.options, true);\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        if (this._subscription != null)\r\n            this._subscription.unsubscribe();\r\n    }\r\n}\r\nEchartsDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: EchartsDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\r\nEchartsDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.1\", type: EchartsDirective, selector: \"[echarts]\", inputs: { options: \"options\", extentions: \"extentions\", isResizable: \"isResizable\", defaultWidth: \"defaultWidth\", defaultHeight: \"defaultHeight\", periodicityInMiliSeconds: \"periodicityInMiliSeconds\", theme: \"theme\" }, outputs: { echartsInstance: \"echartsInstance\" }, usesOnChanges: true, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: EchartsDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: \"[echarts]\"\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { options: [{\r\n                type: Input\r\n            }], extentions: [{\r\n                type: Input\r\n            }], isResizable: [{\r\n                type: Input\r\n            }], defaultWidth: [{\r\n                type: Input\r\n            }], defaultHeight: [{\r\n                type: Input\r\n            }], periodicityInMiliSeconds: [{\r\n                type: Input\r\n            }], theme: [{\r\n                type: Input\r\n            }], echartsInstance: [{\r\n                type: Output\r\n            }] } });\n\nclass EchartsxModule {\r\n}\r\nEchartsxModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: EchartsxModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nEchartsxModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: EchartsxModule, declarations: [EchartsDirective], exports: [EchartsDirective] });\r\nEchartsxModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: EchartsxModule });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: EchartsxModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [EchartsDirective],\r\n                    exports: [EchartsDirective]\r\n                }]\r\n        }] });\n\n/*\r\n * Public API Surface of echartsx\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { EchartsDirective, EchartsxModule };\n"]},"metadata":{},"sourceType":"module"}